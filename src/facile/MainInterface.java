/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package facile;

import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pi
 */
public class MainInterface extends javax.swing.JFrame {

    private int x = -1;
    private float itemsCost = 0;
    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        addValueToComboBoxes();
    }

    public void getValue(int value) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int colCount = jTable1.getColumnCount();

        if (x == -1) {
            model.setValueAt(value, jTable1.getSelectedRow(), 3);
            String barcode1 = (model.getValueAt(jTable1.getSelectedRow(), 0).toString());
            String price1 = (model.getValueAt(jTable1.getSelectedRow(), 2).toString());
            float price = Float.parseFloat(price1);
            float value1 = (float) value;
            float cost = price * value1;
            model.setValueAt(cost, jTable1.getSelectedRow(), 4);
            updateQuantityDatabase(value,barcode1);
        } else {
            model.setValueAt(value, x, 3);
            String price1 = (model.getValueAt(x, 3).toString());
            String barcode1 = (model.getValueAt(jTable1.getSelectedRow(), 0).toString());
            float price = Float.parseFloat(price1);
            float value1 = (float) value;
            float cost = price * value1;
            model.setValueAt(cost, x, 4);
            x = -1;
            updateQuantityDatabase(value,barcode1);
        }
        int rows;
        float total = 0;
        rows = model.getRowCount();
        for (int i = 0; i < rows; i++) {
            total = total + Float.valueOf(jTable1.getModel().getValueAt(i, 4).toString());
        }
        itemsCost = total;
        jLabel4.setText(Float.toString(total));

        jTextField1.requestFocusInWindow();
    }
    
    public void updateQuantityDatabase(int value, String Barcode){
        
        ConnectionManager connection = new ConnectionManager();
        Connection con = connection.connect();
        PreparedStatement preparedStmt1;
        PreparedStatement preparedStmt2;
        ResultSet rs;
        int available = 0;
         int quantityDb = 0;
        String query1 = "Select Quantity from items WHERE Barcode = ?"; 
        String query2 = "UPDATE items SET Quantity =? WHERE Barcode = ?";
        
        
        try {
            
            preparedStmt1 = con.prepareStatement(query1);
            preparedStmt1.setString(1, Barcode);
            rs = preparedStmt1.executeQuery();
            
            while(rs.next()){
            quantityDb = rs.getInt(1);
            }
            int finalquantity = quantityDb - value;
            
            preparedStmt2 = con.prepareStatement(query2);
            preparedStmt2.setInt(1, finalquantity);
            preparedStmt2.setString(2, Barcode);
            preparedStmt2.execute();

            con.close();

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "MYSQL Error While Adding New Order Items ! \n" + ex.getMessage());

        }

        
    }

    public void setValueAt(int quan) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 768));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 768));
        jPanel1.setName("Items"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1366, 768));

        jLabel1.setFont(new java.awt.Font("Rosewood Std Regular", 1, 60)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Kapila Motors");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Barcode");

        jTable1.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name", "Price ", "Quantuty", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setPreferredSize(new java.awt.Dimension(1366, 168));
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(51, 51, 51));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 153));
        jButton1.setText("Finish ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Total   :  Rs.");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 153));
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Vehicle Number :");

        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Service Charge :");

        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Items" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 153));
        jLabel7.setText("KM :");

        jTextField4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 95, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(822, 822, 822))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(54, 54, 54)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(34, 34, 34)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(170, 170, 170))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

        String search = jTextField1.getText();
        boolean exists = false;
        String code;
        int row = 0;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if (search.length() > 1) {

            for (int i = 0; i < jTable1.getRowCount(); i++) {

                code = (model.getValueAt(i, 0).toString());
                System.out.println("c - " + code + "\n" + "s - " + search);
                if (search.equals(code)) {
                    row = i;
                    x = i;
                    exists = true;
                }

            }
            if (!exists) {

                addItem(search);
            } else {
                confirmation2(row);
            }
        }


    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        confirmation();

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
       int response = JOptionPane.showConfirmDialog(null , "Are you sure you want to finish?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if (response == JOptionPane.YES_OPTION) {
        int rows = jTable1.getRowCount();
        int orderid = 0;

        if (rows != 0) {

            float cost = Float.valueOf(jLabel4.getText());

            Date dt = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = sdf.format(dt);

            orderid = addOrder(cost);

            if (orderid != -1) {

                try {

                    for (int i = 0; i < rows; i++) {

                        String itemcode = jTable1.getModel().getValueAt(i, 0).toString();
                        String name = jTable1.getModel().getValueAt(i, 1).toString();
                        int quantity = Integer.parseInt(jTable1.getModel().getValueAt(i, 3).toString());
                        float itemcost = Float.valueOf(jTable1.getModel().getValueAt(i, 4).toString());
                        String vehicleNumber = jTextField2.getText();
                        
                        addOrderItems(orderid, itemcode, name, quantity, itemcost,vehicleNumber);

                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }

            } else {

                JOptionPane.showMessageDialog(null, "Error !");

            }
        DefaultTableModel model2 = (DefaultTableModel) jTable1.getModel();
        model2.getDataVector().removeAllElements();
        model2.fireTableDataChanged();
        jLabel4.setText("");
        jTextField1.requestFocusInWindow();

        this.setVisible(false);
        new FinishShopping(orderid).setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null,"No items added to proceed");
        }

        
        
        }
        /*this.setVisible(false);
        new FinishShopping().setVisible(true);
        float total = 0;
          jLabel4.setText(Float.toString(total));*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        new Welcome().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
        String charge = jTextField3.getText();
        boolean exists = false;
        String code;
        float sc = Float.valueOf(charge);
        addServiceCharge(sc);
        
        
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped


    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        
        jTextField3.requestFocusInWindow();
    }//GEN-LAST:event_jTextField2ActionPerformed

  public void addValueToComboBoxes () {
      
        Connection con = new ConnectionManager().connect();
        PreparedStatement preparedStmt;
        ResultSet rs = null;
        String query = null;

        query = "SELECT Name FROM items ";

        try {

            preparedStmt = con.prepareStatement(query);
            rs = preparedStmt.executeQuery();
           Vector<String> names = new Vector<String>();
            //String barcode;
             
            while (rs.next()) {
                String name = rs.getString(1);
   
               names.addElement(name);
               jComboBox1.addItem(name);
            }
            JComboBox<String> namelist = new JComboBox<String>();
           
            
            con.close();
            float total;
            float itemtotal = 0;
            int rows;

            //rows = model.getRowCount();
            
            
            float serviceCharge = 0;
           // serviceCharge = Float.valueOf(jTextField3.getText());
            itemsCost =itemtotal;
            jLabel4.setText(Float.toString(itemtotal));
            //System.out.println(total);
           
            //updateQuantityDatabase(1,search);
        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
      
  }


    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        String search = jComboBox1.getSelectedItem().toString();
        boolean exists = false;
        String code;
        int row = 0;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        if (search.length() > 1) {

            for (int i = 0; i < jTable1.getRowCount(); i++) {

                code = (model.getValueAt(i, 0).toString());
                System.out.println("c - " + code + "\n" + "s - " + search);
                if (search.equals(code)) {
                    row = i;
                    x = i;
                    exists = true;
                }

            }
            if (!exists) {

                addItemDropDown(search);
            } else {
                confirmation2(row);
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

   
    
    public void addOrderItems(int order_id, String barcode, String name, int quantity, float itemcost, String vehicleNumber) {

        ConnectionManager connection = new ConnectionManager();
        Connection con = connection.connect();
        PreparedStatement preparedStmt;
        ResultSet rs;
        int available = 0;
        String query = "INSERT INTO Order_items(order_id,barcode,name,quantity,cost,vehicleNumber,serviceCharge)"
                + " values (?, ?, ?, ?,?,?,?)";
        float serviceCharge = Float.valueOf(jTextField3.getText());

        try {

            preparedStmt = con.prepareStatement(query);
            preparedStmt.setInt(1, order_id);
            preparedStmt.setString(2, barcode);
            preparedStmt.setString(3, name);
            preparedStmt.setInt(4, quantity);
            preparedStmt.setFloat(5, itemcost);
            preparedStmt.setString(6, vehicleNumber);
            preparedStmt.setFloat(7, serviceCharge);
            preparedStmt.execute();

            con.close();

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "MYSQL Error While Adding New Order Items ! \n" + ex.getMessage());

        }

    }

    public int addOrder(float price) {

        ConnectionManager connection = new ConnectionManager();
        Connection con = connection.connect();
        ResultSet rs;
        PreparedStatement preparedStmt;
        int orderid = -1;
//        String query = "INSERT INTO order(total_cost, date) values (?,?)";
        String query = "INSERT INTO `order`(`total_cost`, `date`, `vehicleNumber`) VALUES (?,?,?)";
//        get Current date
        Date date = new Date();
        String modifiedDate = new SimpleDateFormat("yyyy-MM-dd").format(date);
        
        String vehicleNum = jTextField2.getText();

        try {

            preparedStmt = con.prepareStatement(query);
            preparedStmt.setFloat(1, price);
            preparedStmt.setString(2, modifiedDate);
            preparedStmt.setString(3, vehicleNum);
            preparedStmt.execute();

            JOptionPane.showMessageDialog(null, "Order Placed Succesfully");

            String query2 = "SELECT max(`order_id`) FROM `order`";
            preparedStmt = con.prepareStatement(query2);
            rs = preparedStmt.executeQuery();
            while (rs.next()) {
                orderid = rs.getInt(1);
            }

            con.close();

        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, "MYSQL Error While Adding New Order ! \n");
            ex.printStackTrace();
        }

        return orderid;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
                // MainInterface main = new MainInterface();
                //main.setLocationRelativeTo(null);
                //main.setVisible(true);
            }
        });
    }

    public void confirmation() {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        int response = JOptionPane.showConfirmDialog(null, "Yes - Update Quantity , No - Delete", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {

            AddItems ai = new AddItems(this);
            ai.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            ai.setVisible(true);
            ai.setLocationRelativeTo(null);

            
        } else {
            model.removeRow(row);

            float total = 0;
            int rows;
            rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                total = total + Float.valueOf(jTable1.getModel().getValueAt(i, 3).toString());
            }

            jLabel4.setText(Float.toString(total));
            jTextField1.setText("");
            jTextField1.requestFocusInWindow();
            
        }

    }

    public void confirmation2(int irow) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        int response = JOptionPane.showConfirmDialog(null, "Yes - Delete , No - Update Quantity", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {

            //  model.removeRow(irow);
            float total = 0;
            int rows = 0;
            rows = model.getRowCount();

            for (int i = 0; i < rows; i++) {
                total = total + Float.valueOf(jTable1.getModel().getValueAt(i, 3).toString());
            }

            jLabel4.setText(Float.toString(total));
            jTextField1.setText("");
            jTextField1.requestFocusInWindow();
        } else {

            AddItems ai = new AddItems(this);
            ai.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            ai.setVisible(true);
            ai.setLocationRelativeTo(null);

        }

    }
    public void addServiceCharge(float sc){
        float total =0;
       // float itemtotal = Float.valueOf(jLabel4.getText());
         total = itemsCost + sc;
         jLabel4.setText(Float.toString(total));
        
    }

    public void addItem(String search) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Connection con = new ConnectionManager().connect();
        PreparedStatement preparedStmt;
        ResultSet rs = null;
        String query = null;

        query = "SELECT * FROM items WHERE Barcode =  ?";

        try {

            preparedStmt = con.prepareStatement(query);
            preparedStmt.setString(1, search);
            rs = preparedStmt.executeQuery();
            String barcode;
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(2), rs.getString(1), rs.getFloat(3), 1, rs.getFloat(3)});
                jTextField1.setText("");
                jTextField1.requestFocusInWindow();
                //barcode = rs.getString(2);
                
            }

            con.close();
            float total;
            float itemtotal = 0;
            int rows;

            rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                itemtotal = itemtotal + Float.valueOf(jTable1.getModel().getValueAt(i, 4).toString());
            }
            
            float serviceCharge = 0;
           // serviceCharge = Float.valueOf(jTextField3.getText());
            itemsCost =itemtotal;
            jLabel4.setText(Float.toString(itemtotal));
            //System.out.println(total);
           
            updateQuantityDatabase(1,search);
        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, ex.getMessage());

        }

    }
    public void addItemDropDown(String search) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        Connection con = new ConnectionManager().connect();
        PreparedStatement preparedStmt;
        ResultSet rs = null;
        String query = null;

        query = "SELECT * FROM items WHERE Name =  ?";

        try {

            preparedStmt = con.prepareStatement(query);
            preparedStmt.setString(1, search);
            rs = preparedStmt.executeQuery();
            String barcode;
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(2), rs.getString(1), rs.getFloat(3), 1, rs.getFloat(3)});
                jTextField1.setText("");
                jTextField1.requestFocusInWindow();
                //barcode = rs.getString(2);
                
            }

            con.close();
            float total;
            float itemtotal = 0;
            int rows;

            rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                itemtotal = itemtotal + Float.valueOf(jTable1.getModel().getValueAt(i, 4).toString());
            }
            
            float serviceCharge = 0;
           // serviceCharge = Float.valueOf(jTextField3.getText());
            itemsCost =itemtotal;
            jLabel4.setText(Float.toString(itemtotal));
            //System.out.println(total);
           
            updateQuantityDatabase(1,search);
        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(null, ex.getMessage());

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

//    void setquantity(int quantity) {
//        System.out.print(quantity);
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.4792210100255
//        
//    }
}
